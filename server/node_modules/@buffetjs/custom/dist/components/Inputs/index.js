"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _core = require("@buffetjs/core");

var _styles = require("@buffetjs/styles");

var _DateTime = _interopRequireDefault(require("../DateTime"));

var _Wrapper = _interopRequireDefault(require("./Wrapper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var inputs = {
  bool: _core.Toggle,
  checkbox: _core.Checkbox,
  date: _core.DatePicker,
  datetime: _DateTime["default"],
  "enum": _core.Enumeration,
  number: _core.InputNumber,
  text: _core.InputText,
  textarea: _core.Textarea,
  time: _core.TimePicker,
  select: _core.Select,
  email: _core.InputText,
  password: _core.InputText,
  search: _core.InputText
};

function Inputs(_ref) {
  var customInputs = _ref.customInputs,
      description = _ref.description,
      inputError = _ref.error,
      id = _ref.id,
      label = _ref.label,
      name = _ref.name,
      handleBlur = _ref.onBlur,
      _onChange = _ref.onChange,
      translatedErrors = _ref.translatedErrors,
      type = _ref.type,
      validations = _ref.validations,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, ["customInputs", "description", "error", "id", "label", "name", "onBlur", "onChange", "translatedErrors", "type", "validations", "value"]);

  var inputValue = (0, _react.useMemo)(function () {
    var ret;

    switch (type) {
      case 'checkbox':
      case 'bool':
        ret = value || false;
        break;

      case 'number':
        ret = (0, _lodash.isUndefined)(value) ? '' : value;
        break;

      default:
        ret = value || '';
    }

    return ret;
  }, [type, value]);
  var allInputs = (0, _react.useRef)(Object.assign(inputs, customInputs));
  var InputComponent = allInputs.current[type] || _core.UnknownInput;
  var inputId = (0, _react.useMemo)(function () {
    return id || name;
  }, [id, name]);
  var descriptionId = "description-".concat(inputId);
  var errorId = "error-".concat(inputId);

  if ((0, _lodash.get)(customInputs, type, null) !== null) {
    return _react["default"].createElement(InputComponent, _extends({
      description: description,
      error: inputError,
      label: label,
      name: name,
      onBlur: handleBlur,
      onChange: _onChange,
      type: type,
      validations: validations,
      value: value
    }, rest));
  }

  return _react["default"].createElement(_core.Error, {
    inputError: inputError,
    name: name,
    translatedErrors: translatedErrors,
    type: type,
    validations: validations
  }, function (_ref2) {
    var canCheck = _ref2.canCheck,
        onBlur = _ref2.onBlur,
        error = _ref2.error,
        dispatch = _ref2.dispatch;
    return _react["default"].createElement(_Wrapper["default"], {
      error: error
    }, type !== 'checkbox' && _react["default"].createElement(_core.Label, {
      htmlFor: inputId
    }, label, (0, _lodash.isEmpty)(label) && _react["default"].createElement(_react["default"].Fragment, null, "\xA0")), _react["default"].createElement(InputComponent, _extends({}, rest, {
      message: label,
      name: name,
      id: inputId,
      "aria-describedby": "".concat(!error && description ? descriptionId : '', " ").concat(error ? errorId : ''),
      "aria-invalid": error ? 'true' : 'false',
      onBlur: (0, _lodash.isFunction)(handleBlur) ? handleBlur : onBlur,
      onChange: function onChange(e) {
        if (!canCheck) {
          dispatch({
            type: 'SET_CHECK'
          });
        }

        dispatch({
          type: 'SET_ERROR',
          error: null
        });

        _onChange(e);
      },
      type: type,
      value: inputValue
    })), !error && description && _react["default"].createElement(_styles.Description, {
      id: descriptionId
    }, description), error && _react["default"].createElement(_styles.ErrorMessage, {
      id: errorId
    }, error));
  });
}

Inputs.defaultProps = {
  customInputs: null,
  description: null,
  id: null,
  error: null,
  label: null,
  onBlur: null,
  onChange: function onChange() {},
  translatedErrors: {
    date: 'This is not a date',
    email: 'This is not an email',
    string: 'This is not a string',
    number: 'This is not a number',
    json: 'This is not a JSON',
    max: 'This is too high',
    maxLength: 'This is too long',
    min: 'This is too small',
    minLength: 'This is too short',
    required: 'This value is required',
    regex: 'This does not match the format',
    uppercase: 'This must be a upper case string'
  },
  validations: {},
  value: null
};
Inputs.propTypes = {
  customInputs: _propTypes["default"].object,
  description: _propTypes["default"].string,
  error: _propTypes["default"].string,
  id: _propTypes["default"].string,
  label: _propTypes["default"].string,
  name: _propTypes["default"].string.isRequired,
  onBlur: _propTypes["default"].func,
  onChange: function onChange() {},
  translatedErrors: _propTypes["default"].objectOf(_propTypes["default"].string),
  type: _propTypes["default"].string.isRequired,
  validations: _propTypes["default"].object,
  value: _propTypes["default"].any
};
var _default = Inputs;
exports["default"] = _default;